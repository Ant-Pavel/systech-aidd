"""Unit-—Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è database_conversation."""

from datetime import datetime
from unittest.mock import AsyncMock, MagicMock, patch

import pytest

from src.database_conversation import DatabaseConversation


class TestDatabaseConversation:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ DatabaseConversation."""

    @pytest.fixture
    def db_conversation(self) -> DatabaseConversation:
        """–°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä DatabaseConversation –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        return DatabaseConversation(max_history_messages=10)

    @pytest.mark.asyncio
    async def test_add_message_success(self, db_conversation: DatabaseConversation) -> None:
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î."""
        mock_connection = AsyncMock()
        mock_pool = MagicMock()
        mock_pool.acquire = MagicMock(
            return_value=AsyncMock(
                __aenter__=AsyncMock(return_value=mock_connection), __aexit__=AsyncMock()
            )
        )

        with patch(
            "src.database_conversation.get_pool", new_callable=AsyncMock, return_value=mock_pool
        ):
            await db_conversation.add_message(
                user_id=12345,
                chat_id=67890,
                role="user",
                content="Hello, world!",
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ execute –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mock_connection.execute.assert_called_once()
        call_args = mock_connection.execute.call_args
        assert "INSERT INTO messages" in call_args[0][0]
        assert call_args[0][1] == 12345  # user_id
        assert call_args[0][2] == 67890  # chat_id
        assert call_args[0][3] == "user"  # role
        assert call_args[0][4] == "Hello, world!"  # content
        assert call_args[0][5] == 13  # message_length

    @pytest.mark.asyncio
    async def test_get_history_with_messages(self, db_conversation: DatabaseConversation) -> None:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏–∑ –ë–î."""
        mock_connection = AsyncMock()
        mock_pool = MagicMock()
        mock_pool.acquire = MagicMock(
            return_value=AsyncMock(
                __aenter__=AsyncMock(return_value=mock_connection), __aexit__=AsyncMock()
            )
        )

        # –ú–æ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –ë–î (ORDER BY created_at DESC)
        mock_rows = [
            {
                "role": "assistant",
                "content": "Hi there!",
                "created_at": datetime(2025, 10, 16, 12, 0, 1),
                "message_length": 9,
            },
            {
                "role": "user",
                "content": "Hello",
                "created_at": datetime(2025, 10, 16, 12, 0, 0),
                "message_length": 5,
            },
        ]
        mock_connection.fetch.return_value = mock_rows

        with patch(
            "src.database_conversation.get_pool", new_callable=AsyncMock, return_value=mock_pool
        ):
            history = await db_conversation.get_history(user_id=123, chat_id=456)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL –∑–∞–ø—Ä–æ—Å
        mock_connection.fetch.assert_called_once()
        call_args = mock_connection.fetch.call_args
        assert "SELECT role, content, created_at, message_length" in call_args[0][0]
        assert "WHERE user_id = $1 AND chat_id = $2 AND deleted_at IS NULL" in call_args[0][0]
        assert "ORDER BY created_at DESC" in call_args[0][0]
        assert "LIMIT $3" in call_args[0][0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç, —Ç.–∫. –≤—ã–±—Ä–∞–ª–∏ DESC)
        assert len(history) == 2
        assert history[0]["role"] == "user"
        assert history[0]["content"] == "Hello"
        assert history[0]["created_at"] == "2025-10-16T12:00:00"
        assert history[0]["message_length"] == 5
        assert history[1]["role"] == "assistant"
        assert history[1]["content"] == "Hi there!"

    @pytest.mark.asyncio
    async def test_get_history_empty(self, db_conversation: DatabaseConversation) -> None:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏."""
        mock_connection = AsyncMock()
        mock_pool = MagicMock()
        mock_pool.acquire = MagicMock(
            return_value=AsyncMock(
                __aenter__=AsyncMock(return_value=mock_connection), __aexit__=AsyncMock()
            )
        )
        mock_connection.fetch.return_value = []

        with patch(
            "src.database_conversation.get_pool", new_callable=AsyncMock, return_value=mock_pool
        ):
            history = await db_conversation.get_history(user_id=123, chat_id=456)

        assert history == []

    @pytest.mark.asyncio
    async def test_clear_history_soft_delete(self, db_conversation: DatabaseConversation) -> None:
        """–¢–µ—Å—Ç soft delete –∏—Å—Ç–æ—Ä–∏–∏ (UPDATE deleted_at)."""
        mock_connection = AsyncMock()
        mock_pool = MagicMock()
        mock_pool.acquire = MagicMock(
            return_value=AsyncMock(
                __aenter__=AsyncMock(return_value=mock_connection), __aexit__=AsyncMock()
            )
        )
        mock_connection.execute.return_value = "UPDATE 5"  # 5 —Å—Ç—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ

        with patch(
            "src.database_conversation.get_pool", new_callable=AsyncMock, return_value=mock_pool
        ):
            await db_conversation.clear_history(user_id=123, chat_id=456)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL –∑–∞–ø—Ä–æ—Å
        mock_connection.execute.assert_called_once()
        call_args = mock_connection.execute.call_args
        assert "UPDATE messages" in call_args[0][0]
        assert "SET deleted_at = $1" in call_args[0][0]
        assert "WHERE user_id = $2 AND chat_id = $3 AND deleted_at IS NULL" in call_args[0][0]
        assert isinstance(call_args[0][1], datetime)  # deleted_at timestamp
        assert call_args[0][2] == 123  # user_id
        assert call_args[0][3] == 456  # chat_id

    @pytest.mark.asyncio
    async def test_clear_history_no_rows(self, db_conversation: DatabaseConversation) -> None:
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–≥–¥–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π."""
        mock_connection = AsyncMock()
        mock_pool = MagicMock()
        mock_pool.acquire = MagicMock(
            return_value=AsyncMock(
                __aenter__=AsyncMock(return_value=mock_connection), __aexit__=AsyncMock()
            )
        )
        mock_connection.execute.return_value = "UPDATE 0"  # 0 —Å—Ç—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ

        with patch(
            "src.database_conversation.get_pool", new_callable=AsyncMock, return_value=mock_pool
        ):
            await db_conversation.clear_history(user_id=123, chat_id=456)

        # –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        mock_connection.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_max_history_limit(self, db_conversation: DatabaseConversation) -> None:
        """–¢–µ—Å—Ç —á—Ç–æ get_history —É—á–∏—Ç—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π."""
        mock_connection = AsyncMock()
        mock_pool = MagicMock()
        mock_pool.acquire = MagicMock(
            return_value=AsyncMock(
                __aenter__=AsyncMock(return_value=mock_connection), __aexit__=AsyncMock()
            )
        )
        mock_connection.fetch.return_value = []

        with patch(
            "src.database_conversation.get_pool", new_callable=AsyncMock, return_value=mock_pool
        ):
            await db_conversation.get_history(user_id=123, chat_id=456)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–∏–º–∏—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ SQL
        call_args = mock_connection.fetch.call_args
        assert call_args[0][3] == 10  # max_history_messages

    @pytest.mark.asyncio
    async def test_message_length_calculation(self, db_conversation: DatabaseConversation) -> None:
        """–¢–µ—Å—Ç —á—Ç–æ message_length –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è."""
        mock_connection = AsyncMock()
        mock_pool = MagicMock()
        mock_pool.acquire = MagicMock(
            return_value=AsyncMock(
                __aenter__=AsyncMock(return_value=mock_connection), __aexit__=AsyncMock()
            )
        )

        content = "–¢–µ—Å—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –∏ —ç–º–æ–¥–∑–∏ üòÄ"

        with patch(
            "src.database_conversation.get_pool", new_callable=AsyncMock, return_value=mock_pool
        ):
            await db_conversation.add_message(
                user_id=123,
                chat_id=456,
                role="user",
                content=content,
            )

        call_args = mock_connection.execute.call_args
        assert call_args[0][5] == len(content)  # message_length –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏

    @pytest.mark.asyncio
    async def test_database_conversation_initialization(self) -> None:
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DatabaseConversation."""
        conv = DatabaseConversation(max_history_messages=20)
        assert conv.max_history_messages == 20

    @pytest.mark.asyncio
    async def test_get_history_returns_chat_message_type(
        self, db_conversation: DatabaseConversation
    ) -> None:
        """–¢–µ—Å—Ç —á—Ç–æ get_history –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø ChatMessage."""
        mock_connection = AsyncMock()
        mock_pool = MagicMock()
        mock_pool.acquire = MagicMock(
            return_value=AsyncMock(
                __aenter__=AsyncMock(return_value=mock_connection), __aexit__=AsyncMock()
            )
        )

        mock_rows = [
            {
                "role": "user",
                "content": "Test",
                "created_at": datetime(2025, 10, 16, 12, 0, 0),
                "message_length": 4,
            }
        ]
        mock_connection.fetch.return_value = mock_rows

        with patch(
            "src.database_conversation.get_pool", new_callable=AsyncMock, return_value=mock_pool
        ):
            history = await db_conversation.get_history(user_id=123, chat_id=456)

        assert len(history) == 1
        message = history[0]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ ChatMessage –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        assert "role" in message
        assert "content" in message
        assert "created_at" in message
        assert "message_length" in message
