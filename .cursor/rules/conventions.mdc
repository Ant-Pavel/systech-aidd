---
alwaysApply: true
---

# Coding Conventions

> Правила для code ассистента при генерации кода.  
> Все детали и обоснования см. в @vision.md

## Обязательные правила

**Принцип KISS** (см. @vision.md раздел 2)
- Максимальная простота решений
- Никакого оверинжиниринга
- Явное лучше неявного
- Минимум абстракций

**Организация классов** (см. @vision.md раздел 2)
- Строго **1 класс = 1 файл**
- Каждый класс решает одну конкретную задачу
- Минимум зависимостей между модулями

**Стиль кода** (см. @vision.md раздел 2)
- Используй **async/await** для всех I/O операций
- **Без type hints** - для скорости разработки MVP
- **Без юнит-тестов** на этапе MVP
- **Без линтеров** на этапе MVP
- Понятные имена переменных и функций
- Короткие методы с одной ответственностью

## Обработка ошибок

**Graceful degradation** (см. @vision.md раздел 2)
- Бот должен продолжать работу при ошибках отдельных запросов
- Логируй ошибки в консоль через стандартный `logging`
- Отправляй понятные сообщения пользователю при ошибках
- Никогда не роняй всё приложение из-за одного запроса

## Структура проекта

**Модули** (см. @vision.md раздел 3)
- `bot.py` - главный класс бота (aiogram)
- `llm_client.py` - работа с LLM через Openrouter
- `message_handler.py` - обработка сообщений пользователя
- `conversation.py` - хранение истории диалога в памяти
- `config.py` - конфигурация из переменных окружения

**Архитектура** (см. @vision.md раздел 4)
- User → Bot → MessageHandler → LLMClient → Openrouter
- MessageHandler использует Conversation для истории
- Поток: получение сообщения → получение истории → запрос LLM → сохранение → ответ

**Модель данных** (см. @vision.md раздел 5)
- Формат сообщений совместим с OpenAI API: `{"role": "user|assistant", "content": "текст"}`
- История хранится в памяти по ключу `(user_id, chat_id)`
- Максимум 10 последних сообщений в истории

## Конфигурация

**Переменные окружения** (см. @vision.md раздел 8)
- Класс `Config` загружает через `python-dotenv`
- Обязательные: `TELEGRAM_BOT_TOKEN`, `OPENROUTER_API_KEY`
- Опциональные: `LLM_MODEL`, `LLM_TEMPERATURE`, `LLM_MAX_TOKENS`, `MAX_HISTORY_MESSAGES`
- Валидация обязательных параметров при старте
- Значения по умолчанию для опциональных

## Логирование

**Формат и уровни** (см. @vision.md раздел 9)
- Формат: `[TIMESTAMP] [LEVEL] [MODULE] - MESSAGE`
- **INFO**: старт бота, входящие сообщения, запросы к LLM, ответы, выполнение команд
- **ERROR**: ошибки API с деталями, исключения со stacktrace
- Только в консоль (stdout), без файлов

## Технологии

**Основной стек** (см. @vision.md раздел 1)
- Python 3.11+
- aiogram 3.x (polling)
- openai (официальный клиент для Openrouter)
- uv (управление зависимостями)
- python-dotenv (переменные окружения)

## Git

- Коммиты на русском языке
- Атомарные изменения (один коммит = одна задача)
- Осмысленные сообщения


